generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUMS
enum Role {
  CLIENT
  STAFF
  ADMIN
}

enum CaseStatus {
  new
  documents_pending
  in_review
  submitted
  approved
  denied
}

enum DocState {
  requested
  uploaded
  approved
  rejected
}

enum PaymentStatus {
  unpaid
  paid
  void
}

enum VisaType {
  TOURIST
  WORK
  STUDENT
}

// MODELS
model User {
  id                String    @id @default(cuid())
  email             String    @unique
  name              String?
  image             String?
  phone             String?
  preferredLanguage String?   @default("EN")
  role              Role      @default(CLIENT)

  casesAsClient     Case[]     @relation("CaseClient")
  casesAsManager    Case[]     @relation("CaseManager")
  casesAsLawyer     Case[]     @relation("Lawyer")
  
  assignedTasks     Task[]     @relation("AssignedTasks")
  createdTasks      Task[]     @relation("CreatedTasks")
  messages          Message[]  @relation("UserMessages")
  documents         Document[] @relation("Uploader")
  reviews           Document[] @relation("Reviewer")
  auditLogs         AuditLog[]
  terms             TermsAcceptance[]

  accounts Account[]
  sessions Session[]
}

model Case {
  id                     String      @id @default(cuid())
  caseNumber             String      @unique
  title                  String
  applicantName          String
  applicantEmail         String
  status                 CaseStatus  @default(new)
  stage                  String      @default("Intake")
  visaType               VisaType?
  originCountry          String?
  destinationCountry     String?
  urgencyLevel           String
  overallStatus          String
  completionPercentage   Int
  totalFee               Float
  currency               String
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt

  client                 User?       @relation("CaseClient", fields: [clientId], references: [id])
  clientId               String?
  caseManager            User?       @relation("CaseManager", fields: [caseManagerId], references: [id])
  caseManagerId          String?
  lawyer                 User?       @relation("Lawyer", fields: [lawyerId], references: [id])
  lawyerId               String?

  documents              Document[]
  requests               DocumentRequest[]
  messages               Message[]
  payments               Payment[]
  auditLogs              AuditLog[]
  journeyStages          JourneyStage[]
  tasks                  Task[]
}

model Document {
  id           String   @id @default(cuid())
  case         Case     @relation(fields: [caseId], references: [id])
  caseId       String
  name         String
  state        DocState @default(requested)
  sizeBytes    Int?
  mimeType     String?
  gcsBucket    String?
  gcsObject    String?
  url          String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  uploadedBy   User?    @relation("Uploader", fields: [uploadedById], references: [id])
  uploadedById String?
  reviewedBy   User?    @relation("Reviewer", fields: [reviewedById], references: [id])
  reviewedById String?
  reviewedAt   DateTime?
}
model DocumentRequest {
  id          String   @id @default(cuid())
  case        Case     @relation(fields: [caseId], references: [id])
  caseId      String
  name        String
  description String?
  required    Boolean  @default(true)
  dueAt       DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
model DocumentType {
  id            String  @id @default(cuid())
  visaType      String
  documentKey   String
  nameEn        String
  nameAr        String
  namePt        String
  descriptionEn String?
  isRequired    Boolean @default(true)
  category      String
  displayOrder  Int
  @@unique([visaType, documentKey])
}
model JourneyStage {
  id         String @id @default(cuid())
  case       Case   @relation(fields: [caseId], references: [id])
  caseId     String
  stageKey   String
  title      String
  stageOrder Int
  status     String
  ownerRole  Role
  @@unique([caseId, stageKey])
}
model Task {
  id          String    @id @default(cuid())
  case        Case      @relation(fields: [caseId], references: [id])
  caseId      String
  title       String
  description String?
  taskType    String
  status      String
  priority    String
  dueDate     DateTime?
  assignedUser  User      @relation("AssignedTasks", fields: [assignedTo], references: [id])
  assignedTo    String
  createdByUser User      @relation("CreatedTasks", fields: [createdBy], references: [id])
  createdBy     String
}
model Message {
  id                   String   @id @default(cuid())
  case                 Case     @relation(fields: [caseId], references: [id])
  caseId               String
  sender               String
  body                 String
  attachmentDocumentId String?
  senderUser           User?    @relation("UserMessages", fields: [senderUserId], references: [id])
  senderUserId         String?
  createdAt            DateTime @default(now())
}
model Payment {
  id              String        @id @default(cuid())
  case            Case          @relation(fields: [caseId], references: [id])
  caseId          String
  title           String?
  description     String
  amount          Float
  amountCents     Int?
  currency        String        @default("USD")
  status          PaymentStatus @default(unpaid)
  invoiceNumber   String?       @unique
  stripeSessionId String?
  stripePiId      String?
  paymentMethod   String?
  issuedAt        DateTime      @default(now())
  paidAt          DateTime?
  dueDate         DateTime?
}
model TermsAcceptance {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  version    String
  ip         String?
  acceptedAt DateTime @default(now())
}
model AuditLog {
  id        String   @id @default(cuid())
  case      Case?    @relation(fields: [caseId], references: [id])
  caseId    String?
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  action    String
  diff      Json?
  createdAt DateTime @default(now())
}
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}
