datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum VisaType {
  work
  spouse
  student
  tourist
  extension
  asylum
  other
}

enum Role {
  CLIENT
  STAFF
  ADMIN
}

enum CaseStatus {
  new               @map("NEW")
  in_review         @map("IN_REVIEW")
  awaiting_client   @map("AWAITING_CLIENT")
  documents_pending @map("DOCUMENTS_PENDING")
  payment_due       @map("PAYMENT_DUE")
  completed         @map("COMPLETED")
  closed            @map("CLOSED")
}

enum DocState {
  requested @map("REQUESTED")
  uploaded  @map("UPLOADED")
  approved  @map("APPROVED")
  rejected  @map("REJECTED")
}

enum PaymentStatus {
  unpaid @map("UNPAID")
  paid   @map("PAID")
  void   @map("VOID")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String?
  image     String?
  phone     String?
  role      Role      @default(CLIENT)

  cases     Case[]    @relation("CaseClient")
  assigned  Case[]    @relation("CaseAssignee")

  messages  Message[] @relation("UserMessages")
  documents Document[] @relation("Uploader")
  reviews   Document[] @relation("Reviewer")
  auditLogs AuditLog[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  accounts  Account[]
  sessions  Session[]
  terms     TermsAcceptance[]
}

model Case {
  id             String         @id @default(cuid())
  title          String
  applicantName  String
  applicantEmail String
  status         CaseStatus     @default(new)
  stage          String         @default("Intake")
  visaType       VisaType?
  originCountry  String?

  client         User?          @relation("CaseClient", fields: [clientId], references: [id])
  clientId       String?

  assignee       User?          @relation("CaseAssignee", fields: [assigneeId], references: [id])
  assigneeId     String?

  documents      Document[]
  requests       DocumentRequest[]
  messages       Message[]
  payments       Payment[]
  auditLogs      AuditLog[]

  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Document {
  id              String    @id @default(cuid())
  case            Case      @relation(fields: [caseId], references: [id])
  caseId          String
  name            String
  state           DocState  @default(requested)
  sizeBytes       Int?
  mimeType        String?
  gcsBucket       String?
  gcsObject       String?
  url             String?

  uploadedBy      User?     @relation("Uploader", fields: [uploadedById], references: [id])
  uploadedById    String?

  reviewedBy      User?     @relation("Reviewer", fields: [reviewedById], references: [id])
  reviewedById    String?
  reviewedAt      DateTime?
  rejectionReason String?

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model DocumentRequest {
  id          String   @id @default(cuid())
  case        Case     @relation(fields: [caseId], references: [id])
  caseId      String
  name        String
  description String?
  required    Boolean  @default(true)
  dueAt       DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Message {
  id                   String   @id @default(cuid())
  case                 Case     @relation(fields: [caseId], references: [id])
  caseId               String
  sender               String   // 'client' | 'staff'
  body                 String
  attachmentDocumentId String?
  senderUser           User?    @relation("UserMessages", fields: [senderUserId], references: [id])
  senderUserId         String?
  createdAt            DateTime @default(now())
}

model Payment {
  id              String         @id @default(cuid())
  case            Case           @relation(fields: [caseId], references: [id])
  caseId          String
  description     String
  amountCents     Int
  currency        String         @default("USD")
  status          PaymentStatus  @default(unpaid)
  invoiceNumber   String         @unique
  stripeSessionId String?
  stripePiId      String?
  issuedAt        DateTime       @default(now())
  paidAt          DateTime?
}

model TermsAcceptance {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  version    String
  ip         String?
  acceptedAt DateTime @default(now())
}

model AuditLog {
  id        String   @id @default(cuid())
  case      Case?    @relation(fields: [caseId], references: [id])
  caseId    String?
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  action    String
  diff      Json?
  createdAt DateTime @default(now())
}

/*** NextAuth ***/
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
