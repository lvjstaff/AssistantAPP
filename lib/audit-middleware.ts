// Audit logging middleware - captures all user actions for compliance
import { NextRequest } from 'next/server';
import { getServerSession } from 'next-auth';
import { getAuthOptions } from './auth';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

export interface AuditLogEntry {
  actorId: string;
  action: string;
  caseId?: string; // Optional case ID if action is case-related
  changes?: any;   // Will be stored in 'diff' field
}

export async function createAuditLog(entry: AuditLogEntry) {
  try {
    // Skip audit logging in mock mode
    if (process.env.SKIP_DB === '1') {
      console.log('üìù Audit Log (Mock):', entry);
      return;
    }

    // Use correct model name and fields that match your schema
    await prisma.auditLog.create({
      data: {
        userId: entry.actorId,
        action: entry.action,
        caseId: entry.caseId || null,
        diff: entry.changes || null,  // Pass the object directly, not as JSON string
        // createdAt will be auto-generated by @default(now())
      }
    });
  } catch (error) {
    console.error('Failed to create audit log:', error);
  }
}
